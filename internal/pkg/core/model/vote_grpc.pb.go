// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteServiceClient is the client API for VoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteServiceClient interface {
	ReadCryptoCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CryptoReply, error)
	AddCryptoCurrency(ctx context.Context, in *CryptoCurrency, opts ...grpc.CallOption) (*CryptoCurrency, error)
	UpdateCryptoCurrency(ctx context.Context, in *CryptoCurrency, opts ...grpc.CallOption) (*CryptoCurrency, error)
	RemoveCryptoCurrency(ctx context.Context, in *CryptoSymbol, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SumVotesFromCryptoCurrency(ctx context.Context, in *CryptoSymbol, opts ...grpc.CallOption) (*TotalVotes, error)
	Upvote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Downvote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type voteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteServiceClient(cc grpc.ClientConnInterface) VoteServiceClient {
	return &voteServiceClient{cc}
}

func (c *voteServiceClient) ReadCryptoCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CryptoReply, error) {
	out := new(CryptoReply)
	err := c.cc.Invoke(ctx, "/core.VoteService/ReadCryptoCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) AddCryptoCurrency(ctx context.Context, in *CryptoCurrency, opts ...grpc.CallOption) (*CryptoCurrency, error) {
	out := new(CryptoCurrency)
	err := c.cc.Invoke(ctx, "/core.VoteService/AddCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) UpdateCryptoCurrency(ctx context.Context, in *CryptoCurrency, opts ...grpc.CallOption) (*CryptoCurrency, error) {
	out := new(CryptoCurrency)
	err := c.cc.Invoke(ctx, "/core.VoteService/UpdateCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) RemoveCryptoCurrency(ctx context.Context, in *CryptoSymbol, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.VoteService/RemoveCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) SumVotesFromCryptoCurrency(ctx context.Context, in *CryptoSymbol, opts ...grpc.CallOption) (*TotalVotes, error) {
	out := new(TotalVotes)
	err := c.cc.Invoke(ctx, "/core.VoteService/SumVotesFromCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) Upvote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.VoteService/Upvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) Downvote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.VoteService/Downvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServiceServer is the server API for VoteService service.
// All implementations must embed UnimplementedVoteServiceServer
// for forward compatibility
type VoteServiceServer interface {
	ReadCryptoCurrencies(context.Context, *emptypb.Empty) (*CryptoReply, error)
	AddCryptoCurrency(context.Context, *CryptoCurrency) (*CryptoCurrency, error)
	UpdateCryptoCurrency(context.Context, *CryptoCurrency) (*CryptoCurrency, error)
	RemoveCryptoCurrency(context.Context, *CryptoSymbol) (*emptypb.Empty, error)
	SumVotesFromCryptoCurrency(context.Context, *CryptoSymbol) (*TotalVotes, error)
	Upvote(context.Context, *Vote) (*emptypb.Empty, error)
	Downvote(context.Context, *Vote) (*emptypb.Empty, error)
	mustEmbedUnimplementedVoteServiceServer()
}

// UnimplementedVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServiceServer struct {
}

func (UnimplementedVoteServiceServer) ReadCryptoCurrencies(context.Context, *emptypb.Empty) (*CryptoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCryptoCurrencies not implemented")
}
func (UnimplementedVoteServiceServer) AddCryptoCurrency(context.Context, *CryptoCurrency) (*CryptoCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCryptoCurrency not implemented")
}
func (UnimplementedVoteServiceServer) UpdateCryptoCurrency(context.Context, *CryptoCurrency) (*CryptoCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCryptoCurrency not implemented")
}
func (UnimplementedVoteServiceServer) RemoveCryptoCurrency(context.Context, *CryptoSymbol) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCryptoCurrency not implemented")
}
func (UnimplementedVoteServiceServer) SumVotesFromCryptoCurrency(context.Context, *CryptoSymbol) (*TotalVotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumVotesFromCryptoCurrency not implemented")
}
func (UnimplementedVoteServiceServer) Upvote(context.Context, *Vote) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upvote not implemented")
}
func (UnimplementedVoteServiceServer) Downvote(context.Context, *Vote) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Downvote not implemented")
}
func (UnimplementedVoteServiceServer) mustEmbedUnimplementedVoteServiceServer() {}

// UnsafeVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServiceServer will
// result in compilation errors.
type UnsafeVoteServiceServer interface {
	mustEmbedUnimplementedVoteServiceServer()
}

func RegisterVoteServiceServer(s grpc.ServiceRegistrar, srv VoteServiceServer) {
	s.RegisterService(&VoteService_ServiceDesc, srv)
}

func _VoteService_ReadCryptoCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).ReadCryptoCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/ReadCryptoCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).ReadCryptoCurrencies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_AddCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).AddCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/AddCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).AddCryptoCurrency(ctx, req.(*CryptoCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_UpdateCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).UpdateCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/UpdateCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).UpdateCryptoCurrency(ctx, req.(*CryptoCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_RemoveCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).RemoveCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/RemoveCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).RemoveCryptoCurrency(ctx, req.(*CryptoSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_SumVotesFromCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).SumVotesFromCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/SumVotesFromCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).SumVotesFromCryptoCurrency(ctx, req.(*CryptoSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_Upvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).Upvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/Upvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).Upvote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_Downvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).Downvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.VoteService/Downvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).Downvote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteService_ServiceDesc is the grpc.ServiceDesc for VoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.VoteService",
	HandlerType: (*VoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadCryptoCurrencies",
			Handler:    _VoteService_ReadCryptoCurrencies_Handler,
		},
		{
			MethodName: "AddCryptoCurrency",
			Handler:    _VoteService_AddCryptoCurrency_Handler,
		},
		{
			MethodName: "UpdateCryptoCurrency",
			Handler:    _VoteService_UpdateCryptoCurrency_Handler,
		},
		{
			MethodName: "RemoveCryptoCurrency",
			Handler:    _VoteService_RemoveCryptoCurrency_Handler,
		},
		{
			MethodName: "SumVotesFromCryptoCurrency",
			Handler:    _VoteService_SumVotesFromCryptoCurrency_Handler,
		},
		{
			MethodName: "Upvote",
			Handler:    _VoteService_Upvote_Handler,
		},
		{
			MethodName: "Downvote",
			Handler:    _VoteService_Downvote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/vote.proto",
}
